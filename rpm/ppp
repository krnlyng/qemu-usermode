commit 86e636951ddce2bb3a82fcaad5abc3779ba4f7ab
Author: Laurent Vivier <laurent@vivier.eu>
Date:   Thu May 23 19:54:13 2019 +0200

    linux-user: fix __NR_semtimedop undeclared error
    
    In current code, __NR_msgrcv and__NR_semtimedop are supposed to be
    defined if __NR_msgsnd is defined.
    
    But linux headers 5.2-rc1 for MIPS define __NR_msgsnd without defining
    __NR_semtimedop and it breaks the QEMU build.
    
    __NR_semtimedop is defined in asm-mips/unistd_n64.h and asm-mips/unistd_n32.h
    but not in asm-mips/unistd_o32.h.
    
    Commit d9cb4336159a ("linux headers: update against Linux 5.2-rc1") has
    updated asm-mips/unistd_o32.h and added __NR_msgsnd but not __NR_semtimedop.
    It introduces __NR_semtimedop_time64 instead.
    
    This patch fixes the problem by checking for each __NR_XXX symbol
    before defining the corresponding syscall.
    
    Fixes: d9cb4336159a ("linux headers: update against Linux 5.2-rc1")
    Reported-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Signed-off-by: Aleksandar Markovic <amarkovic@wavecomp.com>
    Tested-by: Philippe Mathieu-Daudé <philmd@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Alex Bennée <alex.bennee@linaro.org>
    Tested-by: Alex Bennée <alex.bennee@linaro.org>
    Message-Id: <20190523175413.14448-1-laurent@vivier.eu>

diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 5521258..5e29e67 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -763,14 +763,7 @@ safe_syscall2(int, nanosleep, const struct timespec *, req,
 safe_syscall4(int, clock_nanosleep, const clockid_t, clock, int, flags,
               const struct timespec *, req, struct timespec *, rem)
 #endif
-#ifdef __NR_msgsnd
-safe_syscall4(int, msgsnd, int, msgid, const void *, msgp, size_t, sz,
-              int, flags)
-safe_syscall5(int, msgrcv, int, msgid, void *, msgp, size_t, sz,
-              long, msgtype, int, flags)
-safe_syscall4(int, semtimedop, int, semid, struct sembuf *, tsops,
-              unsigned, nsops, const struct timespec *, timeout)
-#else
+#if !defined(__NR_msgsnd) || !defined(__NR_msgrcv) || !defined(__NR_semtimedop)
 /* This host kernel architecture uses a single ipc syscall; fake up
  * wrappers for the sub-operations to hide this implementation detail.
  * Annoyingly we can't include linux/ipc.h to get the constant definitions
@@ -785,14 +778,29 @@ safe_syscall4(int, semtimedop, int, semid, struct sembuf *, tsops,
 
 safe_syscall6(int, ipc, int, call, long, first, long, second, long, third,
               void *, ptr, long, fifth)
+#endif
+#ifdef __NR_msgsnd
+safe_syscall4(int, msgsnd, int, msgid, const void *, msgp, size_t, sz,
+              int, flags)
+#else
 static int safe_msgsnd(int msgid, const void *msgp, size_t sz, int flags)
 {
     return safe_ipc(Q_IPCCALL(0, Q_MSGSND), msgid, sz, flags, (void *)msgp, 0);
 }
+#endif
+#ifdef __NR_msgrcv
+safe_syscall5(int, msgrcv, int, msgid, void *, msgp, size_t, sz,
+              long, msgtype, int, flags)
+#else
 static int safe_msgrcv(int msgid, void *msgp, size_t sz, long type, int flags)
 {
     return safe_ipc(Q_IPCCALL(1, Q_MSGRCV), msgid, sz, flags, msgp, type);
 }
+#endif
+#ifdef __NR_semtimedop
+safe_syscall4(int, semtimedop, int, semid, struct sembuf *, tsops,
+              unsigned, nsops, const struct timespec *, timeout)
+#else
 static int safe_semtimedop(int semid, struct sembuf *tsops, unsigned nsops,
                            const struct timespec *timeout)
 {
