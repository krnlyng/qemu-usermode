This fixes a segfault when using QMutex in a multithreaded program.

The problem only shows up for ARM with Thumb2 and CONFIG_USER_ONLY.

The accounting of instructions in an IT (if-then) block went
off by one when a STREX exception was generated. This caused
the instruction after the block to be mistakenly compiled as
part of the block, and in case of a conditional branch this
meant generating a branch to a label that is never defined.

diff --git a/linux-user/main.c b/linux-user/main.c
index b453a39..13857cf 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -585,6 +585,18 @@ do_kernel_trap(CPUARMState *env)
     return 0;
 }
 
+static int arm_advance_condexec(uint32_t condexec_bits) {
+    /* adjust the IT bits when skipping over an instruction */
+    /* see gen_intermediate_code_internal in translate.c for matching code */
+    uint32_t condexec_mask = (condexec_bits & 0x0f) << 1;
+    uint32_t condexec_cond = condexec_bits >> 4;
+    condexec_cond = (condexec_cond & 0x0e) | ((condexec_mask >> 4) & 1);
+    condexec_mask = (condexec_mask << 1) & 0x1f;
+    if (condexec_mask == 0)
+        return 0;
+    return (condexec_cond << 4) | (condexec_mask >> 1);
+}
+
 /* Store exclusive handling for AArch32 */
 static int do_strex(CPUARMState *env)
 {
@@ -664,6 +676,7 @@ static int do_strex(CPUARMState *env)
 fail:
     env->regs[15] += 4;
     env->regs[(env->exclusive_info >> 4) & 0xf] = rc;
+    env->condexec_bits = arm_advance_condexec(env->condexec_bits);
 done:
     end_exclusive();
     return segv;
